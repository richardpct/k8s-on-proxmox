#cloud-config
package_update: true
write_files:
  - path: /tmp/master.sh
    content: |
      #!/usr/bin/env bash

      set -e -u -x

      apt install -y qemu-guest-agent
      systemctl start qemu-guest-agent

      apt-get update -y
      #apt-get upgrade -y
      apt-get install -y \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        etcd-client \
        nfs-common \
        netcat-openbsd \
        open-iscsi \
        vim \
        less \
        bash-completion \
        bsdmainutils

      cat <<EOF | tee /etc/modules-load.d/k8s.conf
      overlay
      br_netfilter
      EOF

      modprobe overlay
      modprobe br_netfilter

      cat <<EOF | tee /etc/sysctl.d/k8s.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
      EOF

      sysctl --system

      # CONTAINERD
      CONTAINERD_VERS=$(curl -s https://github.com/containerd/containerd | grep '/releases/tag/v' | sed -e 's/.*\(.[0-9]*\.[0-9]*\.[0-9]\).*/\1/')

      cd /root

      curl -L -O https://github.com/containerd/containerd/releases/download/v$CONTAINERD_VERS/containerd-$CONTAINERD_VERS-linux-amd64.tar.gz
      tar Cxzf /usr/local containerd-$CONTAINERD_VERS-linux-amd64.tar.gz
      rm containerd-$CONTAINERD_VERS-linux-amd64.tar.gz

      cat <<EOF | tee /lib/systemd/system/containerd.service
      [Unit]
      Description=containerd container runtime
      Documentation=https://containerd.io
      After=network.target local-fs.target

      [Service]
      ExecStartPre=-/sbin/modprobe overlay
      ExecStart=/usr/local/bin/containerd

      Type=notify
      Delegate=yes
      KillMode=process
      Restart=always
      RestartSec=5

      LimitNPROC=infinity
      LimitCORE=infinity

      TasksMax=infinity
      OOMScoreAdjust=-999

      [Install]
      WantedBy=multi-user.target
      EOF

      mkdir /etc/containerd
      containerd config default > /etc/containerd/config.toml
      sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

      systemctl daemon-reload
      systemctl start containerd
      systemctl enable containerd

      # RUNC
      RUNC_VERS=$(curl -s https://github.com/opencontainers/runc | grep '/releases/tag/v' | sed -e 's/.*\(.[0-9]*\.[0-9]*\.[0-9]\).*/\1/')

      cd /root

      curl -L -O https://github.com/opencontainers/runc/releases/download/v$RUNC_VERS/runc.amd64
      install -m 755 runc.amd64 /usr/local/sbin/runc
      rm runc.amd64

      # CNI
      CNI_PLUGINS_VERS=$(curl -s https://github.com/containernetworking/plugins | grep '/releases/tag/v' | sed -e 's/.*\(.[0-9]*\.[0-9]*\.[0-9]\).*/\1/')

      cd /root

      curl -L -O https://github.com/containernetworking/plugins/releases/download/v$CNI_PLUGINS_VERS/cni-plugins-linux-amd64-v$CNI_PLUGINS_VERS.tgz
      mkdir -p /opt/cni/bin
      tar Cxzf /opt/cni/bin cni-plugins-linux-amd64-v$CNI_PLUGINS_VERS.tgz
      rm cni-plugins-linux-amd64-v$CNI_PLUGINS_VERS.tgz

      # KUBERNETES TOOLS
      KUBE_VERS=$(curl -s https://github.com/kubernetes/kubernetes | grep '/releases/tag/v' | sed -e 's/.*\(.[0-9]*\.[0-9]*\)\..*/\1/')

      [ -d /etc/apt/keyrings ] || mkdir -m 755 /etc/apt/keyrings
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v$KUBE_VERS/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v$KUBE_VERS/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list

      apt-get update -y
      apt-get install -y kubelet kubeadm kubectl
      apt-mark hold kubelet kubeadm kubectl

      # CREATE CLUSTER, only the first control plane performs kubeadm init
      if hostname | grep '\-01$'; then
        kubeadm init \
          --control-plane-endpoint "${lb_ip}:6443" \
          --skip-phases=addon/kube-proxy \
          --apiserver-cert-extra-sans=${lb_ip} \
          --upload-certs
      fi

      echo 'DONE'
    permissions: '0755'
apt:
  preserve_sources_list: false
  primary:
    - arches: [default]
      uri: ${ubuntu_mirror}
  security:
    - arches: [default]
      uri: http://security.ubuntu.com/ubuntu
runcmd:
 - [sh, "/tmp/master.sh"]
